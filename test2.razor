@page "/"
@using Microsoft.FluentUI.AspNetCore.Components
@inject IDialogService DialogService

<h1>Dialog Example</h1>

<FluentButton Appearance="Appearance.Accent" OnClick="OpenDialog">Open Dialog</FluentButton>

@code {
    private bool _showDismissButton = false; // Initial state: "x" is hidden

    private async Task OpenDialog()
    {
        // Reset the dismiss button state before opening the dialog
        _showDismissButton = false;
        StateHasChanged(); // Make sure the dialog parameters are updated

        var parameters = new DialogParameters<MyDialogContent>
        {
            Title = "My Loading Dialog",
            Content = new RenderFragment(builder =>
            {
                builder.OpenComponent<MyDialogContent>(0);
                builder.AddAttribute(1, "OnLoadingComplete", EventCallback.Factory.Create(this, HandleLoadingComplete));
                builder.CloseComponent();
            }),
            ShowDismiss = _showDismissButton, // Initial value
        };

        var dialog = await DialogService.ShowDialogAsync<MyDialogContent>(parameters);
        var result = await dialog.Result;

        if (result.Reason == DialogReason.Dismissed)
        {
            Console.WriteLine("Dialog dismissed by user.");
        }
        else if (result.Reason == DialogReason.Closed)
        {
            Console.WriteLine($"Dialog closed with result: {result.Data}");
        }
    }

    private void HandleLoadingComplete()
    {
        _showDismissButton = true;
        StateHasChanged(); // This will re-render the dialog provider and potentially update the dialog.
                           // However, directly updating ShowDismiss after DialogService.ShowDialogAsync
                           // might not immediately update the *already rendered* dialog header.
                           // A more robust approach might be to re-open the dialog or update it dynamically
                           // if that's supported directly by FluentDialog, which is not the case for ShowDismiss.
                           // The best way to achieve this is to control the "x" icon from within the dialog content.
    }
}