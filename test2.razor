@using Microsoft.AspNetCore.Components.Web
@using Microsoft.FluentUI.AspNetCore.Components

<div style="display: flex; align-items: center; flex-wrap: wrap; gap: 4px; border: 1px solid #ccc; padding: 4px; border-radius: 4px;">
    @foreach (var badgeText in Badges)
    {
        <FluentBadge Appearance="Appearance.Neutral"
                     Dismissible="true"
                     @key="badgeText"
                     @ondismiss="() => RemoveBadge(badgeText)"
                     style="margin-right: 4px;">
            @badgeText
        </FluentBadge>
    }
    <FluentTextField @ref="textFieldReference"
                     @bind-Value="InputValue"
                     Placeholder="Enter text..."
                     style="flex-grow: 1; border: none; outline: none; padding: 4px 0; margin: 0;"
                     @onkeyup="HandleKeyUp" />
</div>

@code {
    private string InputValue { get; set; } = string.Empty;
    private List<string> Badges { get; set; } = new List<string>();
    private FluentTextField? textFieldReference;

    private async Task HandleKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == ";" || args.Key == "Enter")
        {
            if (!string.IsNullOrWhiteSpace(InputValue))
            {
                string badgeToAdd = InputValue.TrimEnd(';', '\r', '\n');
                if (!string.IsNullOrWhiteSpace(badgeToAdd) && !Badges.Contains(badgeToAdd))
                {
                    Badges.Add(badgeToAdd);
                }
                InputValue = string.Empty;
                if (textFieldReference != null)
                {
                    await textFieldReference.FocusAsync();
                }
            }
        }
        else if (args.Key == "Backspace")
        {
            if (string.IsNullOrWhiteSpace(InputValue) && Badges.Any())
            {
                Badges.RemoveAt(Badges.Count - 1);
            }
        }
    }

    private async Task RemoveBadge(string badgeToRemove)
    {
        Badges.Remove(badgeToRemove);
        if (textFieldReference != null)
        {
            await textFieldReference.FocusAsync();
        }
    }
}