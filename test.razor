@using Microsoft.AspNetCore.Components.Web // Required for KeyboardEventArgs
@using Microsoft.FluentUI.AspNetCore.Components // Or your specific FluentUI namespace

<p>Enter values and press Enter or semicolon (;) to create badges. Press Backspace in an empty field to remove the last badge.</p>

<FluentTextField @ref="textFieldReference"
                 Label="Tags"
                 Placeholder="Type here..."
                 @bind-Value="InputValue"
                 @onkeyup="HandleKeyUp">
    <div style="display: flex; flex-wrap: wrap; gap: 4px; margin-top: 4px;">
        @foreach (var badgeText in Badges)
        {
            <FluentBadge Appearance="Appearance.Neutral"
                         Dismissible="true"
                         @key="badgeText" @* Add a key for better Blazor rendering performance with lists *@
                         @ondismiss="() => RemoveBadge(badgeText)">
                @badgeText
            </FluentBadge>
        }
    </div>
</FluentTextField>

@code {
    private string InputValue { get; set; } = string.Empty;
    private List<string> Badges { get; set; } = new List<string>();
    private FluentTextField? textFieldReference; // Make it nullable for better practice

    private async Task HandleKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == ";" || args.Key == "Enter")
        {
            // Prevent default behavior for Enter if it's within a form that might submit
            // args.PreventDefault(); // Uncomment if needed, usually not for semicolon

            if (!string.IsNullOrWhiteSpace(InputValue))
            {
                // Trim the semicolon or any newline characters from the actual badge text
                string badgeToAdd = InputValue.TrimEnd(';', '\r', '\n');

                if (!string.IsNullOrWhiteSpace(badgeToAdd) && !Badges.Contains(badgeToAdd)) // Optional: Prevent duplicate badges
                {
                    Badges.Add(badgeToAdd);
                }
                InputValue = string.Empty; // Clear the input field

                // Optionally refocus, useful if the user wants to type another badge immediately
                if (textFieldReference != null)
                {
                    await textFieldReference.FocusAsync();
                }
            }
        }
        else if (args.Key == "Backspace")
        {
            // Only delete a badge if the text field is empty and there are badges to remove
            if (string.IsNullOrWhiteSpace(InputValue) && Badges.Any())
            {
                Badges.RemoveAt(Badges.Count - 1); // Remove the last badge from the list
                // StateHasChanged(); // Usually not needed if Badges is an ObservableCollection or if Blazor detects the change.
                                   // For List<T>, Blazor should detect the change on RemoveAt.
            }
        }
    }

    private async Task RemoveBadge(string badgeToRemove)
    {
        Badges.Remove(badgeToRemove);
        // Optional: Refocus the text field after a badge is dismissed
        if (textFieldReference != null)
        {
            await textFieldReference.FocusAsync();
        }
    }

    // Optional: Method to add a badge programmatically if needed elsewhere
    public void AddBadge(string badgeText)
    {
        if (!string.IsNullOrWhiteSpace(badgeText) && !Badges.Contains(badgeText))
        {
            Badges.Add(badgeText);
            StateHasChanged(); // Notify Blazor that the UI needs to re-render
        }
    }
}